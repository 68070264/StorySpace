// static/todo.js (‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î: "Save Session" mode ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)

function initTodoApp() {
    
    console.log("initTodoApp() is called! (Save Session mode)");

    // --- 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Element ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô clearBtn ‡πÄ‡∏õ‡πá‡∏ô saveBtn) ---
    const modalBody = document.querySelector('#todoModal .modal-body-content');
    if (!modalBody) { /* ... (error) ... */ return; }

    const controller = modalBody.querySelector('#todo-controller');
    const taskInput = modalBody.querySelector('#task-input');
    const taskList = modalBody.querySelector('#task-list');
    const progressBar = modalBody.querySelector('#progress-bar');
    
    // üåü 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤)
    const saveBtn = modalBody.querySelector('#save-to-bottle-btn'); // üåü (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö HTML)

    // üåü 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° saveBtn ‡πÉ‡∏ô if check
    if (!controller || !taskInput || !taskList || !progressBar || !saveBtn) {
         console.error("initTodoApp: Missing one or more key elements");
         return;
    }

    // --- 2. "‡∏™‡∏°‡∏≠‡∏á" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å "‡∏ï‡∏π‡πâ‡πÄ‡∏ã‡∏ü" ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á) ---
    // üåü 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å "‡∏ï‡∏π‡πâ‡πÄ‡∏ã‡∏ü" ‡∏ó‡∏µ‡πà 1 (Active) 
    let tasks = window.starMemory.loadActiveTasks();

    // --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥" (Save/Load/Render) ---

    // üåü 4. "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏ß‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠" (‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏° Delete [X])
    function render() {
        taskList.innerHTML = '';
        if (tasks.length === 0) {
            taskList.innerHTML = '<li>No tasks yet. Add one!</li>';
        }
        tasks.forEach(task => {
            const li = document.createElement('li');
            li.dataset.id = task.id;
            if (task.completed) {
                li.classList.add('completed');
            }
            // (‡∏•‡∏ö <button class="delete-btn"...> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
            li.innerHTML = `
                <span class="todo-text" data-action="TOGGLE_TASK" style="cursor: pointer;">${task.name}</span>
            `;
            taskList.appendChild(li);
        });
        updateProgressBar();
    }
    
    // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateProgressBar ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    function updateProgressBar() {
        const totalTasks = tasks.length;
        if (totalTasks === 0) { progressBar.style.width = '0%'; return; }
        const completedTasks = tasks.filter(task => task.completed).length;
        const percentage = (completedTasks / totalTasks) * 100;
        progressBar.style.width = percentage + '%';
    }

    // --- 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£" (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î) ---

    function addTodoItem() {
        const taskName = taskInput.value.trim();
        if (taskName === '') return;
        const newTask = { id: Date.now(), name: taskName, completed: false };
        tasks.push(newTask); 
        
        // üåü 5. ‡πÄ‡∏ã‡∏ü "‡∏ï‡∏π‡πâ‡πÄ‡∏ã‡∏ü" ‡∏ó‡∏µ‡πà 1 (Active)
        window.starMemory.saveActiveTasks(tasks);
        
        render(); 
        taskInput.value = '';
    }
    
    function toggleTaskComplete(taskId) {
        const task = tasks.find(task => task.id.toString() === taskId);
        if (task) {
            task.completed = !task.completed; 
            
            // üåü 6. ‡πÄ‡∏ã‡∏ü "‡∏ï‡∏π‡πâ‡πÄ‡∏ã‡∏ü" ‡∏ó‡∏µ‡πà 1 (Active)
            window.starMemory.saveActiveTasks(tasks); 
            
            render();
        }
    }
    
    // üåüüåüüåü 7. "‡∏•‡∏ö" deleteTodoItem() ‡πÅ‡∏•‡∏∞ clearCompletedTasks() ‡∏ó‡∏¥‡πâ‡∏á üåüüåüüåü
    
    // üåüüåüüåü 8. "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: "Save Session" üåüüåüüåü
    function saveSessionToBottle() {
        if (tasks.length === 0) {
            alert("‡πÑ‡∏°‡πà‡∏°‡∏µ Task ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
            return;
        }
        
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ\n(‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à) ‡∏•‡∏á‡πÉ‡∏ô‡∏Ç‡∏ß‡∏î‡πÇ‡∏´‡∏•‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            
            // 1. "Payload" ‡∏Ñ‡∏∑‡∏≠ "‡∏™‡∏°‡∏≠‡∏á" (Array) ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô
            const payload = tasks;
            
            // 2. "‡∏™‡πà‡∏á Payload" ‚û° ‡πÇ‡∏¢‡∏ô Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ "‡∏ï‡∏π‡πâ‡πÄ‡∏ã‡∏ü" ‡∏ó‡∏µ‡πà 2
            window.starMemory.archiveTasks(payload);
            
            alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡∏Ç‡∏ß‡∏î‡πÇ‡∏´‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
            
            // 3. (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏•‡πâ‡∏≤‡∏á Task ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏¥‡πâ‡∏á
            tasks = []; 
            window.starMemory.saveActiveTasks(tasks);
            render();
        }
    }

    // --- 5. "‡∏´‡∏π‡∏ü‡∏±‡∏á" (Event Listeners) (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î) ---
    if (controller.dataset.listenerAttached === 'true') { return; } 
    
    console.log("Attaching main event listener...");
    
    controller.addEventListener('click', (event) => {
        const action = event.target.dataset.action;
        if (!action) return; 

        if (action === 'ADD_TASK') { 
            addTodoItem(); 
        }
        if (action === 'TOGGLE_TASK') { 
            toggleTaskComplete(event.target.closest('li').dataset.id); 
        }
        
        // üåü 9. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Logic ‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á (‡∏•‡∏ö DELETE ‡πÅ‡∏•‡∏∞ CLEAR)
        if (action === 'SAVE_TO_BOTTLE') { 
            saveSessionToBottle(); 
        }
    });
    
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') { 
            addTodoItem(); 
        }
    });
    
    controller.dataset.listenerAttached = 'true';
    
    // --- 6. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ---
    render();
}

// --- "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å" (Export) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
window.initTodoApp = initTodoApp;